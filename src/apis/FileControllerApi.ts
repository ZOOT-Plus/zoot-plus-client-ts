/* tslint:disable */
/* eslint-disable */
/**
 * ZOOT Plus Backend API
 * ZOOT Plus Backend API
 *
 * The version of the OpenAPI document: v2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ImageDownloadDTO,
  MaaResultString,
  MaaResultUnit,
  MaaResultUploadAbility,
  UploadAbility,
} from '../models/index';
import {
    ImageDownloadDTOFromJSON,
    ImageDownloadDTOToJSON,
    MaaResultStringFromJSON,
    MaaResultStringToJSON,
    MaaResultUnitFromJSON,
    MaaResultUnitToJSON,
    MaaResultUploadAbilityFromJSON,
    MaaResultUploadAbilityToJSON,
    UploadAbilityFromJSON,
    UploadAbilityToJSON,
} from '../models/index';

export interface DisableRequest {
    body: boolean;
}

export interface DownloadFileRequest {
    imageDownloadDTO: ImageDownloadDTO;
}

export interface DownloadSpecifiedDateFileRequest {
    beLocated: string;
    _delete: boolean;
    date?: string;
}

export interface EnableRequest {
    body: boolean;
}

export interface SetUploadAbilityRequest {
    uploadAbility: UploadAbility;
}

export interface UploadFileRequest {
    file: Blob;
    type: string;
    version: string;
    classification?: string;
    label?: string;
}

/**
 * 
 */
export class FileControllerApi extends runtime.BaseAPI {

    /**
     * 关闭uploadfile接口
     */
    async disableRaw(requestParameters: DisableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaaResultString>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling disable().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/file/disable`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaaResultStringFromJSON(jsonValue));
    }

    /**
     * 关闭uploadfile接口
     */
    async disable(requestParameters: DisableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaaResultString> {
        const response = await this.disableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 下载文件
     */
    async downloadFileRaw(requestParameters: DownloadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['imageDownloadDTO'] == null) {
            throw new runtime.RequiredError(
                'imageDownloadDTO',
                'Required parameter "imageDownloadDTO" was null or undefined when calling downloadFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/file/download`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ImageDownloadDTOToJSON(requestParameters['imageDownloadDTO']),
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * 下载文件
     */
    async downloadFile(requestParameters: DownloadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.downloadFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 下载文件
     */
    async downloadSpecifiedDateFileRaw(requestParameters: DownloadSpecifiedDateFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['beLocated'] == null) {
            throw new runtime.RequiredError(
                'beLocated',
                'Required parameter "beLocated" was null or undefined when calling downloadSpecifiedDateFile().'
            );
        }

        if (requestParameters['_delete'] == null) {
            throw new runtime.RequiredError(
                '_delete',
                'Required parameter "_delete" was null or undefined when calling downloadSpecifiedDateFile().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['date'] != null) {
            queryParameters['date'] = requestParameters['date'];
        }

        if (requestParameters['beLocated'] != null) {
            queryParameters['beLocated'] = requestParameters['beLocated'];
        }

        if (requestParameters['_delete'] != null) {
            queryParameters['delete'] = requestParameters['_delete'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/file/download`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * 下载文件
     */
    async downloadSpecifiedDateFile(requestParameters: DownloadSpecifiedDateFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.downloadSpecifiedDateFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 开启uploadfile接口
     */
    async enableRaw(requestParameters: EnableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaaResultString>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling enable().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/file/enable`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaaResultStringFromJSON(jsonValue));
    }

    /**
     * 开启uploadfile接口
     */
    async enable(requestParameters: EnableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaaResultString> {
        const response = await this.enableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取上传文件功能状态
     */
    async getUploadAbilityRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaaResultUploadAbility>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/file/upload_ability`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaaResultUploadAbilityFromJSON(jsonValue));
    }

    /**
     * 获取上传文件功能状态
     */
    async getUploadAbility(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaaResultUploadAbility> {
        const response = await this.getUploadAbilityRaw(initOverrides);
        return await response.value();
    }

    /**
     * 设置上传文件功能状态
     */
    async setUploadAbilityRaw(requestParameters: SetUploadAbilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaaResultUnit>> {
        if (requestParameters['uploadAbility'] == null) {
            throw new runtime.RequiredError(
                'uploadAbility',
                'Required parameter "uploadAbility" was null or undefined when calling setUploadAbility().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/file/upload_ability`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UploadAbilityToJSON(requestParameters['uploadAbility']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaaResultUnitFromJSON(jsonValue));
    }

    /**
     * 设置上传文件功能状态
     */
    async setUploadAbility(requestParameters: SetUploadAbilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaaResultUnit> {
        const response = await this.setUploadAbilityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 支持匿名
     * 支持匿名
     */
    async uploadFileRaw(requestParameters: UploadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaaResultString>> {
        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling uploadFile().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling uploadFile().'
            );
        }

        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling uploadFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        if (requestParameters['type'] != null) {
            formParams.append('type', requestParameters['type'] as any);
        }

        if (requestParameters['version'] != null) {
            formParams.append('version', requestParameters['version'] as any);
        }

        if (requestParameters['classification'] != null) {
            formParams.append('classification', requestParameters['classification'] as any);
        }

        if (requestParameters['label'] != null) {
            formParams.append('label', requestParameters['label'] as any);
        }


        let urlPath = `/file/upload`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaaResultStringFromJSON(jsonValue));
    }

    /**
     * 支持匿名
     * 支持匿名
     */
    async uploadFile(requestParameters: UploadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaaResultString> {
        const response = await this.uploadFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
