/* tslint:disable */
/* eslint-disable */
/**
 * ZOOT Plus Backend API
 * ZOOT Plus Backend API
 *
 * The version of the OpenAPI document: v2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CommentsAddDTO,
  CommentsDeleteDTO,
  CommentsRatingDTO,
  CommentsToppingDTO,
  MaaResultCommentsAreaInfo,
  MaaResultString,
} from '../models/index';
import {
    CommentsAddDTOFromJSON,
    CommentsAddDTOToJSON,
    CommentsDeleteDTOFromJSON,
    CommentsDeleteDTOToJSON,
    CommentsRatingDTOFromJSON,
    CommentsRatingDTOToJSON,
    CommentsToppingDTOFromJSON,
    CommentsToppingDTOToJSON,
    MaaResultCommentsAreaInfoFromJSON,
    MaaResultCommentsAreaInfoToJSON,
    MaaResultStringFromJSON,
    MaaResultStringToJSON,
} from '../models/index';

export interface DeleteCommentsRequest {
    commentsDeleteDTO: CommentsDeleteDTO;
}

export interface ModifyStatus1Request {
    id: string;
    status: boolean;
}

export interface QueriesCommentsAreaRequest {
    copilotId: number;
    page: number;
    limit: number;
    desc: boolean;
    orderBy?: string;
    justSeeId?: string;
}

export interface RatesCommentsRequest {
    commentsRatingDTO: CommentsRatingDTO;
}

export interface SendCommentsRequest {
    commentsAddDTO: CommentsAddDTO;
}

export interface ToppingCommentsRequest {
    commentsToppingDTO: CommentsToppingDTO;
}

/**
 * 
 */
export class CommentAreaApi extends runtime.BaseAPI {

    /**
     * 删除评论
     */
    async deleteCommentsRaw(requestParameters: DeleteCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaaResultString>> {
        if (requestParameters['commentsDeleteDTO'] == null) {
            throw new runtime.RequiredError(
                'commentsDeleteDTO',
                'Required parameter "commentsDeleteDTO" was null or undefined when calling deleteComments().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/comments/delete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommentsDeleteDTOToJSON(requestParameters['commentsDeleteDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaaResultStringFromJSON(jsonValue));
    }

    /**
     * 删除评论
     */
    async deleteComments(requestParameters: DeleteCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaaResultString> {
        const response = await this.deleteCommentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 设置通知接收状态
     */
    async modifyStatus1Raw(requestParameters: ModifyStatus1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaaResultString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling modifyStatus1().'
            );
        }

        if (requestParameters['status'] == null) {
            throw new runtime.RequiredError(
                'status',
                'Required parameter "status" was null or undefined when calling modifyStatus1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/comments/status`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaaResultStringFromJSON(jsonValue));
    }

    /**
     * 设置通知接收状态
     */
    async modifyStatus1(requestParameters: ModifyStatus1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaaResultString> {
        const response = await this.modifyStatus1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 分页查询评论
     */
    async queriesCommentsAreaRaw(requestParameters: QueriesCommentsAreaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaaResultCommentsAreaInfo>> {
        if (requestParameters['copilotId'] == null) {
            throw new runtime.RequiredError(
                'copilotId',
                'Required parameter "copilotId" was null or undefined when calling queriesCommentsArea().'
            );
        }

        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling queriesCommentsArea().'
            );
        }

        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling queriesCommentsArea().'
            );
        }

        if (requestParameters['desc'] == null) {
            throw new runtime.RequiredError(
                'desc',
                'Required parameter "desc" was null or undefined when calling queriesCommentsArea().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['copilotId'] != null) {
            queryParameters['copilotId'] = requestParameters['copilotId'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['desc'] != null) {
            queryParameters['desc'] = requestParameters['desc'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        if (requestParameters['justSeeId'] != null) {
            queryParameters['justSeeId'] = requestParameters['justSeeId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/comments/query`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaaResultCommentsAreaInfoFromJSON(jsonValue));
    }

    /**
     * 分页查询评论
     */
    async queriesCommentsArea(requestParameters: QueriesCommentsAreaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaaResultCommentsAreaInfo> {
        const response = await this.queriesCommentsAreaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 为评论点赞
     */
    async ratesCommentsRaw(requestParameters: RatesCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaaResultString>> {
        if (requestParameters['commentsRatingDTO'] == null) {
            throw new runtime.RequiredError(
                'commentsRatingDTO',
                'Required parameter "commentsRatingDTO" was null or undefined when calling ratesComments().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/comments/rating`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommentsRatingDTOToJSON(requestParameters['commentsRatingDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaaResultStringFromJSON(jsonValue));
    }

    /**
     * 为评论点赞
     */
    async ratesComments(requestParameters: RatesCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaaResultString> {
        const response = await this.ratesCommentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 发送评论
     */
    async sendCommentsRaw(requestParameters: SendCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaaResultString>> {
        if (requestParameters['commentsAddDTO'] == null) {
            throw new runtime.RequiredError(
                'commentsAddDTO',
                'Required parameter "commentsAddDTO" was null or undefined when calling sendComments().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/comments/add`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommentsAddDTOToJSON(requestParameters['commentsAddDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaaResultStringFromJSON(jsonValue));
    }

    /**
     * 发送评论
     */
    async sendComments(requestParameters: SendCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaaResultString> {
        const response = await this.sendCommentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 为评论置顶/取消置顶
     */
    async toppingCommentsRaw(requestParameters: ToppingCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaaResultString>> {
        if (requestParameters['commentsToppingDTO'] == null) {
            throw new runtime.RequiredError(
                'commentsToppingDTO',
                'Required parameter "commentsToppingDTO" was null or undefined when calling toppingComments().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/comments/topping`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommentsToppingDTOToJSON(requestParameters['commentsToppingDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaaResultStringFromJSON(jsonValue));
    }

    /**
     * 为评论置顶/取消置顶
     */
    async toppingComments(requestParameters: ToppingCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaaResultString> {
        const response = await this.toppingCommentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
