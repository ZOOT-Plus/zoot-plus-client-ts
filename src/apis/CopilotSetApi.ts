/* tslint:disable */
/* eslint-disable */
/**
 * ZOOT Plus Backend API
 * ZOOT Plus Backend API
 *
 * The version of the OpenAPI document: v2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CommonIdReqLong,
  CopilotSetCreateReq,
  CopilotSetModCopilotsReq,
  CopilotSetQuery,
  CopilotSetUpdateReq,
  MaaResultCopilotSetPageRes,
  MaaResultCopilotSetRes,
  MaaResultLong,
  MaaResultUnit,
} from '../models/index';
import {
    CommonIdReqLongFromJSON,
    CommonIdReqLongToJSON,
    CopilotSetCreateReqFromJSON,
    CopilotSetCreateReqToJSON,
    CopilotSetModCopilotsReqFromJSON,
    CopilotSetModCopilotsReqToJSON,
    CopilotSetQueryFromJSON,
    CopilotSetQueryToJSON,
    CopilotSetUpdateReqFromJSON,
    CopilotSetUpdateReqToJSON,
    MaaResultCopilotSetPageResFromJSON,
    MaaResultCopilotSetPageResToJSON,
    MaaResultCopilotSetResFromJSON,
    MaaResultCopilotSetResToJSON,
    MaaResultLongFromJSON,
    MaaResultLongToJSON,
    MaaResultUnitFromJSON,
    MaaResultUnitToJSON,
} from '../models/index';

export interface AddCopilotIdsRequest {
    copilotSetModCopilotsReq: CopilotSetModCopilotsReq;
}

export interface CreateSetRequest {
    copilotSetCreateReq: CopilotSetCreateReq;
}

export interface DeleteCopilotSetRequest {
    commonIdReqLong: CommonIdReqLong;
}

export interface GetSetRequest {
    id: number;
}

export interface QuerySetsRequest {
    copilotSetQuery: CopilotSetQuery;
}

export interface RemoveCopilotIdsRequest {
    copilotSetModCopilotsReq: CopilotSetModCopilotsReq;
}

export interface UpdateCopilotSetRequest {
    copilotSetUpdateReq: CopilotSetUpdateReq;
}

/**
 * 
 */
export class CopilotSetApi extends runtime.BaseAPI {

    /**
     * 添加作业集作业列表
     */
    async addCopilotIdsRaw(requestParameters: AddCopilotIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaaResultUnit>> {
        if (requestParameters['copilotSetModCopilotsReq'] == null) {
            throw new runtime.RequiredError(
                'copilotSetModCopilotsReq',
                'Required parameter "copilotSetModCopilotsReq" was null or undefined when calling addCopilotIds().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/set/add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CopilotSetModCopilotsReqToJSON(requestParameters['copilotSetModCopilotsReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaaResultUnitFromJSON(jsonValue));
    }

    /**
     * 添加作业集作业列表
     */
    async addCopilotIds(requestParameters: AddCopilotIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaaResultUnit> {
        const response = await this.addCopilotIdsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 创建作业集
     */
    async createSetRaw(requestParameters: CreateSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaaResultLong>> {
        if (requestParameters['copilotSetCreateReq'] == null) {
            throw new runtime.RequiredError(
                'copilotSetCreateReq',
                'Required parameter "copilotSetCreateReq" was null or undefined when calling createSet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/set/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CopilotSetCreateReqToJSON(requestParameters['copilotSetCreateReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaaResultLongFromJSON(jsonValue));
    }

    /**
     * 创建作业集
     */
    async createSet(requestParameters: CreateSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaaResultLong> {
        const response = await this.createSetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 删除作业集
     */
    async deleteCopilotSetRaw(requestParameters: DeleteCopilotSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaaResultUnit>> {
        if (requestParameters['commonIdReqLong'] == null) {
            throw new runtime.RequiredError(
                'commonIdReqLong',
                'Required parameter "commonIdReqLong" was null or undefined when calling deleteCopilotSet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/set/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommonIdReqLongToJSON(requestParameters['commonIdReqLong']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaaResultUnitFromJSON(jsonValue));
    }

    /**
     * 删除作业集
     */
    async deleteCopilotSet(requestParameters: DeleteCopilotSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaaResultUnit> {
        const response = await this.deleteCopilotSetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 查询作业集列表
     */
    async getSetRaw(requestParameters: GetSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaaResultCopilotSetRes>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/set/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaaResultCopilotSetResFromJSON(jsonValue));
    }

    /**
     * 查询作业集列表
     */
    async getSet(requestParameters: GetSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaaResultCopilotSetRes> {
        const response = await this.getSetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 查询作业集列表
     */
    async querySetsRaw(requestParameters: QuerySetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaaResultCopilotSetPageRes>> {
        if (requestParameters['copilotSetQuery'] == null) {
            throw new runtime.RequiredError(
                'copilotSetQuery',
                'Required parameter "copilotSetQuery" was null or undefined when calling querySets().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/set/query`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CopilotSetQueryToJSON(requestParameters['copilotSetQuery']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaaResultCopilotSetPageResFromJSON(jsonValue));
    }

    /**
     * 查询作业集列表
     */
    async querySets(requestParameters: QuerySetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaaResultCopilotSetPageRes> {
        const response = await this.querySetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 添加作业集作业列表
     */
    async removeCopilotIdsRaw(requestParameters: RemoveCopilotIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaaResultUnit>> {
        if (requestParameters['copilotSetModCopilotsReq'] == null) {
            throw new runtime.RequiredError(
                'copilotSetModCopilotsReq',
                'Required parameter "copilotSetModCopilotsReq" was null or undefined when calling removeCopilotIds().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/set/remove`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CopilotSetModCopilotsReqToJSON(requestParameters['copilotSetModCopilotsReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaaResultUnitFromJSON(jsonValue));
    }

    /**
     * 添加作业集作业列表
     */
    async removeCopilotIds(requestParameters: RemoveCopilotIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaaResultUnit> {
        const response = await this.removeCopilotIdsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新作业集信息
     */
    async updateCopilotSetRaw(requestParameters: UpdateCopilotSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaaResultUnit>> {
        if (requestParameters['copilotSetUpdateReq'] == null) {
            throw new runtime.RequiredError(
                'copilotSetUpdateReq',
                'Required parameter "copilotSetUpdateReq" was null or undefined when calling updateCopilotSet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/set/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CopilotSetUpdateReqToJSON(requestParameters['copilotSetUpdateReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaaResultUnitFromJSON(jsonValue));
    }

    /**
     * 更新作业集信息
     */
    async updateCopilotSet(requestParameters: UpdateCopilotSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaaResultUnit> {
        const response = await this.updateCopilotSetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
