/* tslint:disable */
/* eslint-disable */
/**
 * ZOOT Plus Backend API
 * ZOOT Plus Backend API
 *
 * The version of the OpenAPI document: v2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MaaResultPagedDTOMaaUserInfo,
  MaaResultUnit,
} from '../models/index';
import {
    MaaResultPagedDTOMaaUserInfoFromJSON,
    MaaResultPagedDTOMaaUserInfoToJSON,
    MaaResultUnitFromJSON,
    MaaResultUnitToJSON,
} from '../models/index';

export interface FollowRequest {
    followUserId: string;
}

export interface GetFansListRequest {
    page?: number;
    size?: number;
}

export interface GetFollowingListRequest {
    page?: number;
    size?: number;
}

export interface UnfollowRequest {
    followUserId: string;
}

/**
 * 
 */
export class UserFollowApi extends runtime.BaseAPI {

    /**
     * 关注用户
     */
    async followRaw(requestParameters: FollowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaaResultUnit>> {
        if (requestParameters['followUserId'] == null) {
            throw new runtime.RequiredError(
                'followUserId',
                'Required parameter "followUserId" was null or undefined when calling follow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/follow/follow/{followUserId}`.replace(`{${"followUserId"}}`, encodeURIComponent(String(requestParameters['followUserId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaaResultUnitFromJSON(jsonValue));
    }

    /**
     * 关注用户
     */
    async follow(requestParameters: FollowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaaResultUnit> {
        const response = await this.followRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取粉丝列表
     */
    async getFansListRaw(requestParameters: GetFansListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaaResultPagedDTOMaaUserInfo>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/follow/fansList`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaaResultPagedDTOMaaUserInfoFromJSON(jsonValue));
    }

    /**
     * 获取粉丝列表
     */
    async getFansList(requestParameters: GetFansListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaaResultPagedDTOMaaUserInfo> {
        const response = await this.getFansListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取关注列表
     */
    async getFollowingListRaw(requestParameters: GetFollowingListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaaResultPagedDTOMaaUserInfo>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/follow/followingList`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaaResultPagedDTOMaaUserInfoFromJSON(jsonValue));
    }

    /**
     * 获取关注列表
     */
    async getFollowingList(requestParameters: GetFollowingListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaaResultPagedDTOMaaUserInfo> {
        const response = await this.getFollowingListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 取消关注
     */
    async unfollowRaw(requestParameters: UnfollowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaaResultUnit>> {
        if (requestParameters['followUserId'] == null) {
            throw new runtime.RequiredError(
                'followUserId',
                'Required parameter "followUserId" was null or undefined when calling unfollow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/follow/unfollow/{followUserId}`.replace(`{${"followUserId"}}`, encodeURIComponent(String(requestParameters['followUserId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaaResultUnitFromJSON(jsonValue));
    }

    /**
     * 取消关注
     */
    async unfollow(requestParameters: UnfollowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaaResultUnit> {
        const response = await this.unfollowRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
